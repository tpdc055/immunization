'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Alert, AlertDescription } from '@/components/ui/alert';
import {
  Bell,
  X,
  AlertTriangle,
  Info,
  CheckCircle,
  Clock,
  Mail,
  MessageSquare,
  Settings,
  Trash2,
  Eye,
  EyeOff,
  Volume2,
  VolumeX,
  Calendar,
  DollarSign,
  Shield,
  Users,
  Activity
} from 'lucide-react';
import { Alert as AlertType } from '@/lib/types';

// Mock notification data
const mockNotifications: AlertType[] = [
  {
    id: 'ALT001',
    type: 'missed_vaccine',
    level: 'critical',
    title: 'Overdue Vaccinations Alert',
    message: '127 children have overdue vaccinations that require immediate attention.',
    severity: 'critical',
    isRead: false,
    createdDate: new Date('2024-07-01T09:00:00'),
    relatedEntityId: 'CHD001',
    relatedEntityType: 'vaccination',
    actionRequired: true,
  },
  {
    id: 'ALT002',
    level: 'warning',
    type: 'budget_threshold',
    title: 'Budget Threshold Warning',
    message: 'Administration category has reached 90% of allocated budget.',
    severity: 'warning',
    isRead: false,
    createdDate: new Date('2024-07-01T14:30:00'),
    relatedEntityId: 'BUD2024001',
    relatedEntityType: 'budget',
    actionRequired: true,
  },
  {
    id: 'ALT003',
    level: 'warning',
    type: 'governance_task',
    title: 'Action Item Due Soon',
    message: 'Quarterly compliance audit is due in 3 days.',
    severity: 'warning',
    isRead: true,
    createdDate: new Date('2024-06-30T16:00:00'),
    relatedEntityId: 'AI001',
    relatedEntityType: 'action_item',
    actionRequired: true,
  },
  {
    id: 'ALT004',
    level: 'critical',
    type: 'compliance_issue',
    title: 'Cold Chain Monitoring Required',
    message: '5 health facilities need immediate cold chain equipment inspection.',
    severity: 'error',
    isRead: false,
    createdDate: new Date('2024-07-01T11:15:00'),
    relatedEntityId: 'FAC001',
    relatedEntityType: 'facility',
    actionRequired: true,
  },
  {
    id: 'ALT005',
    level: 'info',
    type: 'overdue_vaccine',
    title: 'Vaccination Schedule Update',
    message: 'Monthly vaccination schedule has been updated with new guidelines.',
    severity: 'info',
    isRead: true,
    createdDate: new Date('2024-06-29T10:00:00'),
    relatedEntityId: 'SCH001',
    relatedEntityType: 'schedule',
    actionRequired: false,
  },
];

interface NotificationSystemProps {
  children?: React.ReactNode;
}

export default function NotificationSystem({ children }: NotificationSystemProps) {
  const [notifications, setNotifications] = useState<AlertType[]>(mockNotifications);
  const [isOpen, setIsOpen] = useState(false);
  const [soundEnabled, setSoundEnabled] = useState(true);
  const [emailEnabled, setEmailEnabled] = useState(true);
  const [smsEnabled, setSmsEnabled] = useState(false);

  // Calculate unread count
  const unreadCount = notifications.filter(n => !n.isRead).length;
  const criticalCount = notifications.filter(n => n.severity === 'critical' && !n.isRead).length;

  // Simulate real-time notifications
  useEffect(() => {
    const interval = setInterval(() => {
      // Simulate new notifications (in real app, this would come from WebSocket or polling)
      const randomTypes: AlertType['type'][] = ['budget_threshold', 'missed_vaccine', 'governance_task'];
      const randomType = randomTypes[Math.floor(Math.random() * randomTypes.length)];

      if (Math.random() < 0.1) { // 10% chance every 30 seconds
        const newNotification: AlertType = {
          id: `ALT${Date.now()}`,
          type: randomType,
          level: Math.random() > 0.7 ? 'critical' : 'warning',
          title: 'New System Alert',
          message: 'A new alert has been generated by the system.',
          severity: Math.random() > 0.7 ? 'critical' : 'warning',
          isRead: false,
          createdDate: new Date(),
          actionRequired: true,
        };

        setNotifications(prev => [newNotification, ...prev]);

        // Play notification sound
        if (soundEnabled) {
          // In a real app, you would play an actual sound
          console.log('ðŸ”” Notification sound played');
        }
      }
    }, 30000); // Check every 30 seconds

    return () => clearInterval(interval);
  }, [soundEnabled]);

  const markAsRead = (id: string) => {
    setNotifications(prev =>
      prev.map(n => n.id === id ? { ...n, isRead: true } : n)
    );
  };

  const markAllAsRead = () => {
    setNotifications(prev =>
      prev.map(n => ({ ...n, isRead: true }))
    );
  };

  const deleteNotification = (id: string) => {
    setNotifications(prev => prev.filter(n => n.id !== id));
  };

  const getNotificationIcon = (type: AlertType['type']) => {
    switch (type) {
      case 'budget_threshold':
        return DollarSign;
      case 'missed_vaccine':
      case 'overdue_vaccine':
        return Calendar;
      case 'governance_task':
        return Shield;
      case 'compliance_issue':
        return AlertTriangle;
      default:
        return Bell;
    }
  };

  const getSeverityColor = (severity: AlertType['severity']) => {
    switch (severity) {
      case 'critical':
        return 'bg-red-100 text-red-800 border-red-200';
      case 'error':
        return 'bg-red-100 text-red-800 border-red-200';
      case 'warning':
        return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'info':
        return 'bg-blue-100 text-blue-800 border-blue-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const formatTimeAgo = (date: Date) => {
    const now = new Date();
    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));

    if (diffInMinutes < 1) return 'Just now';
    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;

    const diffInHours = Math.floor(diffInMinutes / 60);
    if (diffInHours < 24) return `${diffInHours}h ago`;

    const diffInDays = Math.floor(diffInHours / 24);
    return `${diffInDays}d ago`;
  };

  // Send email notification (simulation)
  const sendEmailAlert = (notification: AlertType) => {
    if (!emailEnabled) return;

    // In a real app, this would call an API to send email
    console.log('ðŸ“§ Email sent:', {
      to: 'admin@health.gov.pg',
      subject: notification.title,
      body: notification.message,
    });

    alert(`Email alert sent: ${notification.title}`);
  };

  // Send SMS alert (simulation)
  const sendSmsAlert = (notification: AlertType) => {
    if (!smsEnabled) return;

    // In a real app, this would call an SMS API
    console.log('ðŸ“± SMS sent:', {
      to: '+675123456789',
      message: `CIMGS Alert: ${notification.title} - ${notification.message}`,
    });

    alert(`SMS alert sent: ${notification.title}`);
  };

  return (
    <>
      {/* Notification Bell Icon */}
      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogTrigger asChild>
          <Button variant="ghost" size="sm" className="relative">
            <Bell className="h-5 w-5" />
            {unreadCount > 0 && (
              <Badge className="absolute -top-1 -right-1 px-1 min-w-[1.25rem] h-5">
                {unreadCount > 99 ? '99+' : unreadCount}
              </Badge>
            )}
            {criticalCount > 0 && (
              <div className="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full animate-pulse" />
            )}
          </Button>
        </DialogTrigger>

        <DialogContent className="max-w-2xl max-h-[80vh] overflow-hidden">
          <DialogHeader>
            <div className="flex items-center justify-between">
              <DialogTitle className="flex items-center">
                <Bell className="h-5 w-5 mr-2" />
                Notifications ({unreadCount} unread)
              </DialogTitle>
              <div className="flex space-x-2">
                <Button variant="ghost" size="sm" onClick={() => setSoundEnabled(!soundEnabled)}>
                  {soundEnabled ? <Volume2 className="h-4 w-4" /> : <VolumeX className="h-4 w-4" />}
                </Button>
                <Button variant="ghost" size="sm" onClick={markAllAsRead}>
                  Mark All Read
                </Button>
              </div>
            </div>
            <DialogDescription>
              System alerts and notifications requiring your attention
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4 max-h-[60vh] overflow-y-auto">
            {/* Notification Settings */}
            <Card>
              <CardHeader className="pb-3">
                <CardTitle className="text-sm">Notification Settings</CardTitle>
              </CardHeader>
              <CardContent className="pt-0">
                <div className="flex items-center justify-between space-x-4">
                  <div className="flex items-center space-x-4">
                    <div className="flex items-center space-x-2">
                      <Mail className="h-4 w-4 text-muted-foreground" />
                      <span className="text-sm">Email</span>
                      <input
                        type="checkbox"
                        checked={emailEnabled}
                        onChange={(e) => setEmailEnabled(e.target.checked)}
                        className="rounded"
                      />
                    </div>

                    <div className="flex items-center space-x-2">
                      <MessageSquare className="h-4 w-4 text-muted-foreground" />
                      <span className="text-sm">SMS</span>
                      <input
                        type="checkbox"
                        checked={smsEnabled}
                        onChange={(e) => setSmsEnabled(e.target.checked)}
                        className="rounded"
                      />
                    </div>
                  </div>

                  <Button variant="outline" size="sm">
                    <Settings className="h-4 w-4 mr-1" />
                    Configure
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Critical Alerts Section */}
            {criticalCount > 0 && (
              <div className="space-y-2">
                <h3 className="text-sm font-medium text-red-600 flex items-center">
                  <AlertTriangle className="h-4 w-4 mr-2" />
                  Critical Alerts ({criticalCount})
                </h3>
                {notifications
                  .filter(n => n.severity === 'critical' && !n.isRead)
                  .map((notification) => {
                    const Icon = getNotificationIcon(notification.type);
                    return (
                      <Alert key={notification.id} className="border-red-200 bg-red-50">
                        <Icon className="h-4 w-4 text-red-500" />
                        <AlertDescription>
                          <div className="flex items-center justify-between">
                            <div>
                              <div className="font-medium text-red-800">{notification.title}</div>
                              <div className="text-red-700">{notification.message}</div>
                            </div>
                            <div className="flex space-x-1">
                              <Button size="sm" variant="destructive" onClick={() => sendEmailAlert(notification)}>
                                <Mail className="h-3 w-3" />
                              </Button>
                              <Button size="sm" variant="destructive" onClick={() => sendSmsAlert(notification)}>
                                <MessageSquare className="h-3 w-3" />
                              </Button>
                            </div>
                          </div>
                        </AlertDescription>
                      </Alert>
                    );
                  })}
              </div>
            )}

            {/* All Notifications */}
            <div className="space-y-2">
              <h3 className="text-sm font-medium">All Notifications</h3>
              {notifications.length === 0 ? (
                <div className="text-center py-8">
                  <Bell className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                  <h3 className="text-lg font-medium mb-2">No notifications</h3>
                  <p className="text-muted-foreground">
                    You're all caught up! No new alerts at this time.
                  </p>
                </div>
              ) : (
                notifications.map((notification) => {
                  const Icon = getNotificationIcon(notification.type);
                  return (
                    <div
                      key={notification.id}
                      className={`p-4 rounded-lg border transition-colors ${
                        notification.isRead ? 'bg-gray-50 border-gray-200' : 'bg-white border-gray-300'
                      } ${getSeverityColor(notification.severity)}`}
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex items-start space-x-3 flex-1">
                          <Icon className="h-5 w-5 mt-0.5 text-muted-foreground" />
                          <div className="flex-1">
                            <div className="flex items-center space-x-2 mb-1">
                              <h4 className="font-medium text-sm">{notification.title}</h4>
                              <Badge variant="outline" className={getSeverityColor(notification.severity)}>
                                {notification.severity}
                              </Badge>
                              {!notification.isRead && (
                                <div className="w-2 h-2 bg-blue-500 rounded-full" />
                              )}
                            </div>
                            <p className="text-sm text-muted-foreground mb-2">
                              {notification.message}
                            </p>
                            <div className="flex items-center space-x-4 text-xs text-muted-foreground">
                              <span>{formatTimeAgo(notification.createdDate)}</span>
                              {notification.actionRequired && (
                                <Badge variant="outline" className="bg-orange-100 text-orange-800">
                                  Action Required
                                </Badge>
                              )}
                            </div>
                          </div>
                        </div>

                        <div className="flex items-center space-x-1 ml-2">
                          {notification.severity === 'critical' && (
                            <>
                              <Button
                                size="sm"
                                variant="ghost"
                                onClick={() => sendEmailAlert(notification)}
                                title="Send Email Alert"
                              >
                                <Mail className="h-3 w-3" />
                              </Button>
                              <Button
                                size="sm"
                                variant="ghost"
                                onClick={() => sendSmsAlert(notification)}
                                title="Send SMS Alert"
                              >
                                <MessageSquare className="h-3 w-3" />
                              </Button>
                            </>
                          )}
                          <Button
                            size="sm"
                            variant="ghost"
                            onClick={() => markAsRead(notification.id)}
                            title={notification.isRead ? 'Mark as Unread' : 'Mark as Read'}
                          >
                            {notification.isRead ? <EyeOff className="h-3 w-3" /> : <Eye className="h-3 w-3" />}
                          </Button>
                          <Button
                            size="sm"
                            variant="ghost"
                            onClick={() => deleteNotification(notification.id)}
                            title="Delete Notification"
                          >
                            <Trash2 className="h-3 w-3" />
                          </Button>
                        </div>
                      </div>
                    </div>
                  );
                })
              )}
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Toast-style Critical Notifications */}
      {notifications
        .filter(n => n.severity === 'critical' && !n.isRead)
        .slice(0, 3) // Show max 3 toast notifications
        .map((notification, index) => (
          <div
            key={notification.id}
            className={`fixed top-4 right-4 z-50 transition-all duration-300 ${
              index > 0 ? `translate-y-${(index + 1) * 20}` : ''
            }`}
            style={{ marginTop: `${index * 80}px` }}
          >
            <Alert className="w-96 border-red-200 bg-red-50 shadow-lg">
              <AlertTriangle className="h-4 w-4 text-red-500" />
              <AlertDescription>
                <div className="flex items-center justify-between">
                  <div>
                    <div className="font-medium text-red-800">{notification.title}</div>
                    <div className="text-red-700 text-sm">{notification.message.substring(0, 50)}...</div>
                  </div>
                  <Button
                    size="sm"
                    variant="ghost"
                    onClick={() => markAsRead(notification.id)}
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
              </AlertDescription>
            </Alert>
          </div>
        ))}

      {children}
    </>
  );
}
